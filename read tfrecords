import tensorflow as tf
import numpy as np
import struct
from matplotlib import pyplot as plt

encode = False
iterate = False
decode = True

train_file = "MNISTdata/train-images.idx3-ubyte"
label_file = "MNISTdata/train-labels.idx1-ubyte"

# Load everything in some numpy arrays
with open(label_file, 'rb') as flbl:
    magic, num = struct.unpack(">II", flbl.read(8))
    lbl = np.fromfile(flbl, dtype=np.int8)
with open(train_file, 'rb') as fimg:
    magic, num, rows, cols = struct.unpack(">IIII", fimg.read(16))
    img = np.fromfile(fimg, dtype=np.uint8).reshape(len(lbl), rows, cols)

img_shape = img[0].shape

record_file = "mnist_train.tfrecord"
#################  read and encode to tf_record

if encode:
    print("Begin encoding")
    writer = tf.python_io.TFRecordWriter(record_file)
    for i in range(len(lbl)):
        label = int(lbl[i])  #.tostring()
        image = img[i].tostring()

        feature = {"label": tf.train.Feature(int64_list = tf.train.Int64List(value = [label])),
                "image": tf.train.Feature(bytes_list = tf.train.BytesList(value = [image])) }
        feature = tf.train.Features(feature=feature)

        example = tf.train.Example(features = feature)
        writer.write(example.SerializeToString())

    writer.close()


################ iterate to test
if iterate:
    reconstructed_images = []
    record_iterator = tf.python_io.tf_record_iterator(path=record_file)

    for string_record in record_iterator:
        example = tf.train.Example()
        example.ParseFromString(string_record)
        
        label = int(example.features.feature['label']
                                    .int64_list
                                    .value[0])
        img_string = (example.features.feature['image']
                                    .bytes_list
                                    .value[0])
        
        img_1d = np.fromstring(img_string, dtype=np.uint8)
        reconstructed_img = img_1d.reshape(img_shape)
        plt.title(str(label))
        plt.imshow(reconstructed_img)


############### decode tf record ###########
if decode:
    print("Begin decoding")
    # tf record files queue
    filename_queue = tf.train.string_input_producer([record_file], num_epochs=10)
    
    # read and decode
    reader = tf.TFRecordReader()
    _,serialized_example = reader.read(filename_queue)

    features = {"label": tf.FixedLenFeature([],tf.int64),
                "image": tf.FixedLenFeature([],tf.string) }
    features = tf.parse_single_example(serialized_example, features = features)

    
    image = tf.decode_raw(features['image'],tf.uint8)
    label = features['label']
    image = tf.reshape(image,img_shape)


    
    
    with tf.Session() as sess:
        sess.run(tf.local_variables_initializer())
        sess.run(tf.global_variables_initializer())
        
        coord = tf.train.Coordinator()
        threads = tf.train.start_queue_runners(coord=coord)

        for i in range(10):
            img,lab = sess.run([image,label])
            plt.title(str(lab))
            plt.imshow(img,cmap="gray")
